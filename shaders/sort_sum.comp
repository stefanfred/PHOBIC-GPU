#version 450
#include "default_header.glsl"

// Push constant
layout(push_constant) uniform PushStruct {
    uint partitionMaxSize;
} p;

layout(binding = 0) buffer bucketSizesB { uint bucketSizes[]; };
layout(binding = 1) buffer debugB { uint debug[]; };
layout(binding = 2) buffer histoB { uint histo[]; };
layout(binding = 3) buffer partitionSizesB { uint partitionSizes[]; };
layout(binding = 4) buffer bucketPermutationB { uint bucketPermutation[]; };
layout(constant_id = 1) const uint BUCKETS = 42;
layout(constant_id = 2) const uint BINS = 42;


#include "constants.glsl"

shared uint[BINS] binSizes;
shared uint[BINS] binSizesCopy;
shared uint[BUCKETS] bucketSizesLocal;
shared uint[BUCKETS] bucketCntInBin;



//#define SHUFFLE

#ifdef SHUFFLE
shared uint permutationData[BUCKETS];
#include "hashing.glsl"


uint rand(uint seed, uint max) {
    return lowbias32(seed) % max;
}

void shuffle(uint start) {
    if (gl_LocalInvocationID.x!=0) {
        return;
    }
    for (uint index = 0; index < BUCKETS; index+=1) {
        permutationData[index]=index;
    }
    for (uint index = 0; index < BUCKETS *10; index+=1) {
        uint i1=rand(start^index, BUCKETS);
        uint i2=rand(start^(index+BUCKETS *10), BUCKETS);
        uint tmp=permutationData[i1];
        permutationData[i1] = permutationData[i2];
        permutationData[i2] = tmp;
    }
}
#endif


uint binAssign(uint size) {
    return BINS - size;
}

uint prefixSumBins() {

    uint localSize = 2 * wSize;
    uint halfsize = wSize;
    // reversed index for convenience
    uint rlID = halfsize - lID - 1;

    uint binFactor = BINS / localSize;

    // local summing
    for (uint i = 1; i < binFactor; i++) {
        binSizes[i+binFactor*lID]+=binSizes[i+binFactor*lID-1];
        binSizes[i+binFactor*(lID+wSize)]+=binSizes[i+binFactor*(lID + wSize)-1];
    }
    barrier();


    // Perform up-sweep
    uint stride = 1;
    // loop until all reductions are performed
    while (stride <= halfsize) {
        // threads that participate in this reduction step
        if (rlID % stride == 0) {
            binSizes[(lID * 2 + 2) * binFactor - 1] = binSizes[(2 * lID - stride + 2) * binFactor-1] + binSizes[(2 * lID + 2) * binFactor-1];
        }
        stride = stride * 2;

        // sync with other threads
        barrier();
    }

    // Set the last element to 0 and save sum
    uint sum = binSizes[BINS-1];
    barrier();
    if (lID == 0) {
        binSizes[BINS-1] = 0;
    }


    // Perform down-sweep
    // loop until all (but last) propagations are performed
    stride = halfsize;
    while (stride > 0) {
        barrier();
        bool part = rlID % stride == 0;
        uint upperLeftValue;
        if (part) {
            // threads that participate in this propagations step
            upperLeftValue = binSizes[(lID * 2 + 2 - stride) * binFactor-1];
        }
        barrier();
        if (part){
            // left child
            binSizes[(lID * 2 + 2 - stride) * binFactor-1] = binSizes[(lID * 2 + 2) * binFactor-1];
            // right child
            binSizes[(lID * 2 + 2) * binFactor-1] = binSizes[(lID * 2 + 2) * binFactor-1] + upperLeftValue;
        }

        // half the stride for next layer
        stride = stride / 2;
    }

    barrier();
    // local summing
    uint ssum1=binSizes[binFactor*(lID+1)-1];
    uint ssum2=binSizes[binFactor*(wSize+lID+1)-1];
    uint prev1=0;
    uint prev2=0;

    for (uint i = 0; i < binFactor; i++) {
        uint next1 = binSizes[i+binFactor*lID];
        uint next2 = binSizes[i+binFactor*(wSize+lID)];
        binSizes[i+binFactor*lID]=prev1+ssum1;
        binSizes[i+binFactor*(wSize+lID)]=prev2 + ssum2;
        prev1=next1;
        prev2=next2;
    }

    return sum;
}

void main() {
    #ifdef SHUFFLE
    shuffle(wID);
    #endif

    // initialize bin counter shared variable to zero
    for (uint i = lID; i < BINS; i+= wSize) {
        binSizes[i] = 0;
    }

    barrier();

    // set bin sizes and local offsets
    //for(uint index = lID; index < BUCKETS; index+=wSize) {
    //for(uint index = 0; lID == 0 && index < BUCKETS; index+=1) {
    for (int index = int(BUCKETS) - 1; lID == 0 && index >-1; index-=1) {
        #ifdef SHUFFLE
        uint index2 = permutationData[index];
        #else
        uint index2 = index;
        #endif

        uint size = bucketSizes[(index2 + wID * BUCKETS)];
        //atomicMax(debug[0], size);
        bucketSizesLocal[index2] = size;
        if (size > 0) {
            //uint cnt = atomicAdd(binSizes[(binAssign(size))], 1);
            uint cnt = binSizes[(binAssign(size))];
            binSizes[(binAssign(size))]+=1;
            bucketCntInBin[index2] = cnt;
        }
    }


    barrier();


    // write the histogram of the bucket sizes to a buffer and make a copy
    for (uint i = lID; i < BINS; i+= wSize) {
        histo[i + wID * BINS] = binSizes[i];
        binSizesCopy[i] = binSizes[i];
    }

    // offsets of bins
    barrier();
    prefixSumBins();
    barrier();


    // write back the sort permutation to rearrange later
    uint offsetOfPartition = wID * BUCKETS;
    for (uint index = lID; index < BUCKETS; index+=wSize) {
        uint size = bucketSizesLocal[index];
        if (size > 0) {
            uint offsetInBin = bucketCntInBin[index];
            uint offsetOfBin = binSizes[(binAssign(size))];
            bucketPermutation[offsetInBin + offsetOfBin + offsetOfPartition] = index;
        }
    }

    barrier();

    // restore copy and multiply with actual size
    for (uint i = lID; i < BINS; i+= wSize) {
        binSizes[i] = binSizesCopy[i] * (BINS - i);
    }
    barrier();

    // prefix sum the bins
    uint sum = prefixSumBins();
    if (lID == 0) {
        partitionSizes[gl_WorkGroupID.x] = sum;
    }

    barrier();

    // write back the offsets
    for (uint index = lID; index < BUCKETS; index+=wSize) {
        uint size = bucketSizesLocal[index];
        if (size > 0) {
            uint offsetInBin = bucketCntInBin[index] * size;
            uint offsetOfBin = binSizes[(binAssign(size))];
            bucketSizes[index + wID * BUCKETS] = offsetInBin + offsetOfBin;
        }
    }
}