#version 450


layout(local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;

// Push constant
layout(push_constant) uniform PushStruct {
    uint size;
    uint partitionCount;
    uint bucketCount;
} p;


#include "key_mapping.glsl"

layout(binding = 0) buffer keysSrcB { Key keysSrc[]; };
layout(binding = 1) buffer keysLowerDstB { uint keysLowerDst[]; };

layout(binding = 2) buffer bucketOffsetsB { uint bucketOffsets[]; };
layout(binding = 3) buffer keyOffsetsB { uint keyOffsets[]; };


void main() {
    uint gID = gl_GlobalInvocationID.x;
    uint wSize = gl_WorkGroupSize.x;
    uint wID = gl_WorkGroupID.x;
    uint lID = gl_LocalInvocationID.x;
    uint index = wID * wSize * 4 + lID;

    uint offset = keyOffsets[gID];
    uint target;
    Key key;

    if (index>=p.size) return;
    key = keysSrc[index];
    target = bucketOffsets[assignBucketAbsolute(key.partitioner, key.bucketer, p.partitionCount, p.bucketCount)] + ((offset >> 24));
    keysLowerDst[2*target] = key.lower1;
    keysLowerDst[2*target+1] = key.lower2;
    index += wSize;

    if (index>=p.size) return;
    key = keysSrc[index];
    target = bucketOffsets[assignBucketAbsolute(key.partitioner, key.bucketer, p.partitionCount, p.bucketCount)] + ((offset >> 16) & 0xFF);
    keysLowerDst[2*target] = key.lower1;
    keysLowerDst[2*target+1] = key.lower2;
    index += wSize;

    if (index>=p.size) return;
    key = keysSrc[index];
    target = bucketOffsets[assignBucketAbsolute(key.partitioner, key.bucketer, p.partitionCount, p.bucketCount)] + ((offset >> 8) & 0xFF);
    keysLowerDst[2*target] = key.lower1;
    keysLowerDst[2*target+1] = key.lower2;
    index += wSize;

    if (index>=p.size) return;
    key = keysSrc[index];
    target = bucketOffsets[assignBucketAbsolute(key.partitioner, key.bucketer, p.partitionCount, p.bucketCount)] + ((offset) & 0xFF);
    keysLowerDst[2*target] = key.lower1;
    keysLowerDst[2*target+1] = key.lower2;
}